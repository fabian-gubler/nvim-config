{
    "title": "JSON schema for .cdsprettier.json",
    "$schema": "http://json-schema.org/draft-06/schema#",
    "type": "object",
    "description": "This is a JSON schema representation for .cdsprettier.json config files",
    "properties": {
        
        "alignAfterKey" : {
            "category": "Alignment",
            "label": "Align _element names_ after **key**",
            "description": "Align _element identifiers_ after optional **key** keyword",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignAnnotations" : {
            "category": "Alignment",
            "label": "Align _annotations_",
            "description": "Align _annotations_",
            "type": "boolean",
            "default": true,
            "subOptions" : ["alignPreAnnotations","alignPostAnnotations","alignColonsInAnnotations","alignValuesInAnnotations"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignPreAnnotations" : {
            "category": "Alignment",
            "label": "pre-annotations",
            "description": "Align annotations before items. If multiple annotations exist in a line, they are aligned in a tabular way",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAnnotations",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignPostAnnotations" : {
            "category": "Alignment",
            "label": "post-annotations",
            "description": "Align annotations after items",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAnnotations",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignColonsInAnnotations" : {
            "category": "Alignment",
            "label": "colons",
            "description": "Align _colons_ in annotations",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAnnotations",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignValuesInAnnotations" : {
            "category": "Alignment",
            "label": "values",
            "description": "Align _values_ in annotations",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAnnotations",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignActionsAndFunctions" : {
            "category": "Alignment",
            "label": "Align _actions_ and _functions_",
            "description": "Align parts of _actions_ and _functions_",
            "type": "boolean",
            "default": true,
            "subOptions" : ["alignActionNames","alignActionReturns"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignActionNames" : {
            "category": "Alignment",
            "label": "_names_",
            "description": "Align the names of _functions_ and _actions_",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignActionsAndFunctions",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignActionReturns" : {
            "category": "Alignment",
            "label": "**returns** keyword",
            "description": "Align the **returns** keyword of _actions_ and _functions_",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignActionsAndFunctions",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignAs" : {
            "category": "Alignment",
            "label": "Align **as**",
            "description": "Align the **as** keyword",
            "type": "boolean",
            "default": true,
            "subOptions" : ["alignAsInEntities","alignAsInSelectItems","alignAsInUsing"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignAsInEntities" : {
            "category": "Alignment",
            "label": "in entities",
            "description": "Align the **as** keyword in entities. Alignment scope: encompassing context",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAs",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignAsInSelectItems" : {
            "category": "Alignment",
            "label": "in **select** items",
            "description": "Align the **as** keyword in entity **select** items",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAs",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignAsInUsing" : {
            "category": "Alignment",
            "label": "in **using**",
            "description": "Align the **as** keyword in **using** statements",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignAs",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignExpressionsAndConditions" : {
            "category": "Alignment",
            "label": "Align _expressions_ and _conditions_",
            "description": "Align parts of _expressions_ and _conditions_, including left- and right-hand side and operator",
            "type": "boolean",
            "default": true,
            "subOptions" : ["alignExprAndCondWithinBlock"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignExprAndCondWithinBlock" : {
            "category": "Alignment",
            "label": "within block",
            "description": "Align parts of _expressions_ and _conditions_ within the encompassing block rather than throughout the whole statement",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignExpressionsAndConditions",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignTypes" : {
            "category": "Alignment",
            "label": "Align _types_ of elements",
            "description": "Align _element types_ within entities, type or annotation specifications",
            "type": "boolean",
            "default": true,
            "subOptions" : ["alignColonsBeforeTypes","alignEqualsAfterTypes","alignTypesWithinBlock","alignCompositionStructToRight"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignColonsBeforeTypes" : {
            "category": "Alignment",
            "label": "including _colons_",
            "description": "Align _colons_ before element types",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignTypes",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignEqualsAfterTypes" : {
            "category": "Alignment",
            "label": "including _assignment operators_",
            "description": "Align _assignment operators_ **=** after element types",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignTypes",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignTypesWithinBlock" : {
            "category": "Alignment",
            "label": "within block",
            "description": "Align _element types_ (and _colons_) within the encompassing block rather than throughout the whole statement",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignTypes",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "alignCompositionStructToRight" : {
            "category": "Alignment",
            "label": "Align _struct_ in **composition** to the right",
            "description": "Align _struct_ defined in **composition** to the right",
            "type": "boolean",
            "default": true,
            "parentOption" : "alignTypes",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "cqlKeywordCapitalization" : {
            "category": "Other",
            "label": "Capitalization style of _CQL keywords_",
            "description": "How _CQL keywords_ are capitalized",
            "type": "string",
            "enum": ["lower","upper","title","as-is"],
            "default": "lower",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "keepPreAnnotationsInOriginalLine" : {
            "category": "Other",
            "label": "Line wrapping of _pre-annotations_",
            "description": "Either keeps the line structure of _pre-annotations_ or wraps each annotation in separate line",
            "type": "string",
            "enum": ["keepLine","separateLine"],
            "default": "keepLine",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "keepPostAnnotationsInOriginalLine" : {
            "category": "Other",
            "label": "Line wrapping of _post-annotations_",
            "description": "Either keeps the line structure of _post-annotations_ or wraps each annotation in separate line",
            "type": "string",
            "enum": ["keepLine","separateLine"],
            "default": "keepLine",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "keepEmptyBracketsTogether" : {
            "category": "Other",
            "label": "Keep empty _brackets_ together",
            "description": "Keep _bracket pairs_ **{} [] ()** together rather than separating them with whitespace",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "keepSingleLinedBlocksTogether" : {
            "category": "Other",
            "label": "Keep similar single-lined _blocks_ together",
            "description": "Avoid single-lined _blocks_ of the same type being separated by empty lines",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "keepOriginalEmptyLines" : {
            "category": "Other",
            "label": "Keep original _empty lines_",
            "description": "Prevent deletion of consecutive empty lines below the limit. If disabled, allow consecutive empty lines to be removed depending on the context",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "maxKeepEmptyLines" : {
            "category": "Other",
            "label": "Maximum consecutive _empty lines_",
            "description": "Maximum number of consecutive _empty lines_ to keep. Empty lines below this limit may still be removed depending on other settings",
            "type": "number",
            "default": 2,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "openingBraceInNewLine" : {
            "category": "Other",
            "label": "Line wrapping before opening _brace_",
            "description": "Wrap line before opening _brace_",
            "type": "boolean",
            "default": false,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "selectInNewLine" : {
            "category": "Other",
            "label": "Line wrapping before **select** of entity or view",
            "description": "Start **select** statement of entity or view definition in a new line (indented)",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "tabSize" : {
            "category": "Other",
            "label": "Tab size",
            "description": "Specify the number of spaces per indentation level",
            "type": "number",
            "default": 2,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "finalNewline" : {
            "category": "Other",
            "label": "Final newline",
            "description": "Insert newline character at the end of the file",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "maxDocCommentLine" : {
            "category": "Other",
            "label": "Max doc comment line length",
            "description": "Wrap doc comment lines at given length",
            "type": "number",
            "default": 60,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceBeforeColon" : {
            "category": "Whitespace",
            "label": "Blank before _colon_",
            "description": "Use blank to separate item from following _colon_",
            "type": "boolean",
            "default": true,
            "subOptions" : ["whitespaceBeforeColonInAnnotation"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceBeforeColonInAnnotation" : {
            "category": "Whitespace",
            "label": "Blank before _colon_ in _annotations_",
            "description": "Use blank to separate key and _colon_ in _annotations_",
            "type": "boolean",
            "default": false,
            "parentOption" : "whitespaceBeforeColon",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceAfterColon" : {
            "category": "Whitespace",
            "label": "Blank after _colon_",
            "description": "Use blank to separate _colon_ from following item",
            "type": "boolean",
            "default": true,
            "subOptions" : ["whitespaceAfterColonInAnnotation"],
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceAfterColonInAnnotation" : {
            "category": "Whitespace",
            "label": "Blank after _colon_ in _annotations_",
            "description": "Use blank to separate _colon_ and value in _annotations_",
            "type": "boolean",
            "default": true,
            "parentOption" : "whitespaceAfterColon",
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceAfterComma" : {
            "category": "Whitespace",
            "label": "Blank after _comma_",
            "description": "Use blank to separate _comma_ from following item",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceAroundAlignedOps" : {
            "category": "Whitespace",
            "label": "Blanks around aligned _binary operators_ and _colons_",
            "description": "Use blank before and after aligned _binary operators_ and _colons_ (except colons in annotations)",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceAroundBinaryOps" : {
            "category": "Whitespace",
            "label": "Blanks around _binary operators_",
            "description": "Use blank before and after _binary operators_",
            "type": "boolean",
            "default": true,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        },

        "whitespaceWithinBrackets" : {
            "category": "Whitespace",
            "label": "Blanks within _brackets_",
            "description": "Use blank after opening and before closing _brackets_ **{} [] ()**",
            "type": "boolean",
            "default": false,
            "sample": "using {\n  Person    as User,\n  UserIdent as UserID\n} from './persons';\n\n@requires             : 'authenticated-user'  @insertonly\n@PropertyRestrictions : true                  @Searchable : true\nentity Task : managed {\n  key id       : /* UUID */ String(20) = 4;\n      assignee :            Association to one User @cds.on.insert /*1*/ :       #user;\n      subTasks :            Composition of many {\n                              id : Integer;\n                            }\n      priority :            Integer = 2;\n      dueOn    :            DateTime                @cds.on.insert       : /*2*/ #now;\n}\n\ncontext Lists {\n  entity TaskList    as\n      select from Task as task\n      join ToDo as todo\n        on  todo.taskId =      't' + task.id\n        and task.dueOn  is not null\n      mixin {\n        taskType        : Association to one TaskType\n\n                            on taskType.available = true;\n        rejectionStatus : Association to one Text;\n      }\n      into {\n        task.id : String,\n        task.dueOn    as dueOn,\n        task.assignee as assignee\n      }\n    union\n      select from GenericTasks\n      mixin {}\n      into {\n        'none' as id\n      }\n      actions {\n        action print()  returns Integer;\n        function sort() returns array of Task;\n      };\n\n  entity HiddenTasks as\n    select from Hidden {\n\n\n      // only expose ID\n      id\n    }\n}\n\n\ntype Number : Integer;\n/**\n * # The Text\n *\n * This is a very delicate sentence as it has few tiny words in\n * it\n *\n * * * *\n *\n * - _italics_ and **bold**\n * - **bold** or _italics_\n *\n * 1. good\n * 2. cheap\n *\n *    | name    | age |\n *    | ------- | --: |\n *    | john    |  39 |\n *    | joe     |   2 |\n *    | grandma | 108 |\n */\ntype Text : String;\n"
        }
    }
}
