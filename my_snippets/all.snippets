# --- Regression


snippet ols_standard-error "Regression"
@ Standard Error OLS @
proc (1) = get_sterr_ols(b_est);
	local b_se, xx, sigma2_est, b_cv;

	xx = ones(n, 1)~x;						// add constant
	sigma2_est = sumc((y - xx * b_est .^2) / (n - cols(xx)));	// sum of square residuals / (number of observations - cols)
	b_cv = sigma2_est * invpd(xx'xx);		// covariance matrix
	b_se = sqrt(diag(b_cv));				// sqrt of diagonal vector
	retp(b_se);
endp;
endsnippet

snippet iv_standard-error "Regression"
@ Standard Error IV @
proc (1) = get_sterr_iv(b_iv);
	local b_se, xx, zz, sigma2_est, b_cv, x_hat;

	xx = ones(n, 1)~x;						// add constant
	zz = ones(n, 1)~z;						// add constant
	sigma2_est = sumc((y - xx * b_est .^2) / (n - cols(xx)));	// sum of square residuals / (number of observations - cols)
	x_hat = zz * invpd(zz'zz)*zz'xx;
	b_cv = sigma2_est * invpd(x_hat'x_hat);	// covariance matrix

	b_se = sqrt(diag(b_cv));				// sqrt of diagonal vector
	retp(b_se);
endp;

{b_se} = get_sterr_ols(b_est);
print b_se;
{b_se} = get_sterr_ols(b_est);
print b_se;
endsnippet


snippet iv_built-in "Regression"
"------------------------------------------------------------------------------------------";
"Instrumental Variables: Built in";
"------------------------------------------------------------------------------------------";

struct gmmOut gmm_result;
data_iv = file_name;
gmm_result = gmmFitIV(data_iv, "Dependent ~ var + var");
endsnippet

snippet iv_custom "Regression"
// iv: error term is correlated or simultaneity
proc (1) = iv_custom(y, x, z);
	local b;
	
	x = ones(rows(x),1) ~ x; 			// add constant
	z = ones(rows(x),1) ~ z; 			// add constant
	b = inv(z'x) * z'y;					// simple estimation formula, not symmetric
	
	retp(b);
endp;

// iv point estimation
delta = -0.5;							// change
mu = 3;
x4 			= x[.,3] * delta + mu; 
b_IV  = iv_custom(y,x,x[.,1 2]~x4,1);	// x3 is correletad and thus substituted by x4
endsnippet

snippet ols_custom "Regression"
"------------------------------------------------------------------------------------------";
"OLS Regression: Custom";
"------------------------------------------------------------------------------------------";

var1 = { Grade };
var2 = { IQ };
var3 = { HStudied };

// add for loop for multiple variables
proc(3) = extract_data(var1, var2, var3);
	local data1, data2, data3, ind1, ind2, ind3; 

	// retrieve index
	{var1, ind1 } = indices(file_name, var1);
	{var2, ind2 } = indices(file_name, var2);  
	{var3, ind3 } = indices(file_name, var3);  
	
	// extract data
	data1 = data_input[.,ind1];
	data2 = data_input[.,ind2];
	data3 = data_input[.,ind3];
	
	retp(data1, data2, data3);
endp;

// extract data and save to variables
{y, x_1, x_2} = extract_data(var1, var2, var3);

// concatenate our dependent variables
x = x_1 ~ x_2;

// error term is uncorrelated -> ols
proc (1) = ols_custom(y, x);
	local b;
	
	x = ones(rows(x),1) ~ x; 			// add constant
	b = invpd(x'x) * x'y;			    // simple estimation formula
	
	retp(b);
endp;

{b_est} = ols_custom(y, x);
endsnippet

snippet ols_built-in "Regression"
"------------------------------------------------------------------------------------------";
"OLS Regression: Built in";
"------------------------------------------------------------------------------------------";

@ OLS Built in (using Formula) @
call ols(file_name, "Grade ~ .");

@ OLS Built in (using Variables) @
depvar = { Grade };
indvars = { IQ, HStudied, QualityHS };
call ols(file_name, depvar, indvars);

@ Save Returned Values @
{ vnam, m, b, stb, vc, stderr, sigma, cx, rsq, resid, dwstat }  = ols(file_name, "Grade ~ .");
endsnippet

# --- General
snippet boilerplate "General"
/*
** Programming Assignment Gauss
*/

new; cls; rndseed 534238;

@ Working directory @
working_dir = "/analytics/gauss/"; 				// set working directory
chdir ^working_dir;								// change to working dir

@ Handle output @
outputfile = working_dir $+ "results.out";		// file to save output
output file =^outputfile reset;					// overwrite old output
endsnippet

snippet filter_logic "Regression"
data_filtered = selif(data_input, data_input[., 1] .== 0);
rows(data_filtered);
endsnippet

snippet load_data "General"
@ Load and preview data @
file_name = "$0";
var_names = getname(file_name);
//data_input = csvReadM(file_name);				// load csv data
data_input = loadd(file_name);					// load dat data
endsnippet

snippet plot_hist "General"
plotHist(var, 100)	// bins = 100

endsnippet
snippet plot_scatter "General"
plotOpenWindow; 
call plotscatter(data_input, "Grade ~ HStudied");
endsnippet

# --- Descriptive
snippet overview_all "Descriptive"
"------------------------------------------------------------------------------------------";
"Descriptive Statistics: Built in";
"------------------------------------------------------------------------------------------";
?;
"Data source: " ;; $file_name;

@ Descriptive statistics @
//call dstatmt(0, enter_computation_directly); 	// if in memory		    
call dstatmt(data_input, var_names); 			// compute stats for dataset

@ Median @
md = median(data_input);

?;
"----------------------------------  Median  ----------------------------------------------";
?;
for i (1, cols(data_input), 1);
	$var_names[i];; md[i];
endfor;
endsnippet

snippet custom_median "Descriptive"
?; "--- Median ---"; ?;

proc (0) = get_median(data);
	local unsorted, sorted, length, index;
	
	for i (1, cols(data_input), 1);
		unsorted = data_input[.,i];
		sorted = sorthc(unsorted, 1);
		length = rows(unsorted);
		index = (length + 1) / 2;
		$var_names[i];; sorted[index];
	endfor;
endp;

get_median(data_input);
endsnippet
# --- PROGRAMMING
snippet proc "Programming"
proc (1) = name(arglist);
	local $0;
	retp();
endp;
endsnippet

snippet custom_mean "Descriptive"
?; "--- Mean ---"; ?;

proc (1) = get_mean(vector);
	local n, sum, mean;
	
	n = rows(vector);
	sum = sumc(vector);
	mean = sum / n;
	retp(mean);
endp;

proc (0) = print_all_means(data);
	local column, mean;
	
	for i (1, cols(data), 1);
		column = data[.,i];
		mean = get_mean(column);
		$var_names[i];; mean;
	endfor;
endp;

print_all_means(data_input);
endsnippet

snippet custom_stand_dev "Descriptive"
?; "--- Standard Deviation ---"; ?;

proc (1) = get_standard_deviation(vector);
	
	// initialize
	local n, standard_deviation, sum, mean;
	sum = 0;
	
	n = rows(vector);				// amount of rows (n)
	mean = get_mean(vector);		// compute mean
	
	// summing up diff of x_i & sample mean
	for i (1, n, 1);
		sum = sum + (vector[i] - mean) * (vector[i] - mean);
	endfor;
	
	// compute std. deviation
	standard_deviation = sqrt(1/n * sum);
	retp(standard_deviation);
endp;

proc (0) = print_all_standard_deviations(data);
	local column, standard_deviation;
	
	// go through all columns
	for i (1, cols(data), 1);
		column = data[.,i];										// isolate column
		standard_deviation = get_standard_deviation(column);	// compute standard deviation
		$var_names[i];; standard_deviation;						// print results to console
	endfor;
endp;

// invoke function
print_all_standard_deviations(data_input);
endsnippet

snippet for "Programming"
for i (start, stop, step);
	$0;
endfor;
endsnippet

snippet ifelse "Programming"
if expression;
	$0;
// elseif expression;
else;
	// statement
endif;
endsnippet

snippet dowhile "Programming"
do while expression;
	$0
endo;
endsnippet

snippet dountil "Programming"
do until expression;
	$0
endo;
endsnippet
